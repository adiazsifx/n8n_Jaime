{"createdAt":"2025-05-31T11:48:05.621Z","updatedAt":"2025-06-01T22:17:03.000Z","id":"1tf0gsz7gCtgt1SZ","name":"AI Agent with charts capabilities using OpenAI Structured Output and Quickchart","active":false,"isArchived":true,"nodes":[{"parameters":{"model":"gpt-4.1","options":{}},"id":"4b7c314a-d7c5-46cb-af6f-b3ff02a182b7","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[1340,580],"typeVersion":1,"credentials":{"openAiApi":{"id":"w75RuNSCJjKqeuAT","name":"OpenAi JPG"}}},{"parameters":{},"id":"cf4ffa49-8830-4db2-9a7d-b8931e806947","name":"Window Buffer Memory","type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","position":[1480,580],"typeVersion":1.2},{"parameters":{"name":"generate_a_chart","description":"Call this tool whenever you need to generate a chart.","workflowId":"={{ $workflow.id }}","specifyInputSchema":true,"schemaType":"manual","inputSchema":"{\n\"type\": \"object\",\n\"properties\": {\n\t\"query\": {\n\t\t\"type\": \"string\",\n\t\t\"description\": \"a query describing the chart to generate\"\n\t\t}\n\t}\n}"},"id":"22d36226-ca37-4ccc-a2d6-826b78c2f1f3","name":"Generate a chart","type":"@n8n/n8n-nodes-langchain.toolWorkflow","position":[1620,580],"typeVersion":1.1},{"parameters":{},"id":"d9ea85d7-3a56-4a95-88c8-60e5c95014e7","name":"Execute \"Generate a chart\" tool","type":"n8n-nodes-base.executeWorkflowTrigger","position":[940,1080],"typeVersion":1},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/chat/completions","authentication":"predefinedCredentialType","nodeCredentialType":"openAiApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"=Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"Based on the user request, generate a valid Chart.js definition. Important: - Be careful with the data scale and beginatzero that all data are visible. Example if ploted data 2 and 3 on a bar chart, the baseline should be 0. - Charts colors should be different only if there are multiple datasets. - Output valid JSON. In scales, min and max are numbers. Example: `{scales:{yAxes:[{ticks:{min:0,max:3}`\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"{{ $json.query.query }}\"\n        }\n    ],\n    \"response_format\": {\n  \"type\": \"json_schema\",\n  \"json_schema\": {\n    \"name\": \"chart_configuration\",\n    \"description\": \"Configuration schema for Chart.js charts\",\n    \"strict\": true,\n    \"schema\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\"bar\", \"line\", \"radar\", \"pie\", \"doughnut\", \"polarArea\", \"bubble\", \"scatter\", \"area\"]\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"labels\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"datasets\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"label\": {\n                \"type\": [\"string\", \"null\"]\n              },\n              \"data\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"number\"\n                }\n              },\n              \"backgroundColor\": {\n                \"type\": [\"array\", \"null\"],\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"borderColor\": {\n                \"type\": [\"array\", \"null\"],\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"borderWidth\": {\n                \"type\": [\"number\", \"null\"]\n              }\n            },\n            \"required\": [\"data\", \"label\", \"backgroundColor\", \"borderColor\", \"borderWidth\"],\n            \"additionalProperties\": false\n          }\n        }\n      },\n      \"required\": [\"labels\", \"datasets\"],\n      \"additionalProperties\": false\n    },\n    \"options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"scales\": {\n          \"type\": [\"object\", \"null\"],\n          \"properties\": {\n            \"yAxes\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": [\"object\", \"null\"],\n                \"properties\": {\n                  \"ticks\": {\n                    \"type\": [\"object\", \"null\"],\n                    \"properties\": {\n                      \"max\": {\n                        \"type\": [\"number\", \"null\"]\n                      },\n                      \"min\": {\n                        \"type\": [\"number\", \"null\"]\n                      },\n                      \"stepSize\": {\n                        \"type\": [\"number\", \"null\"]\n                      },\n                      \"beginAtZero\": {\n                        \"type\": [\"boolean\", \"null\"]\n                      }\n                    },\n                    \"required\": [\"max\", \"min\", \"stepSize\", \"beginAtZero\"],\n                    \"additionalProperties\": false\n                  },\n                  \"stacked\": {\n                    \"type\": [\"boolean\", \"null\"]\n                  }\n                },\n                \"required\": [\"ticks\", \"stacked\"],\n                \"additionalProperties\": false\n              }},\n              \"xAxes\": {\n                \"type\": [\"object\", \"null\"],\n                \"properties\": {\n                  \"stacked\": {\n                    \"type\": [\"boolean\", \"null\"]\n                  }\n                },\n                \"required\": [\"stacked\"],\n                \"additionalProperties\": false\n              }\n          },\n          \"required\": [\"yAxes\", \"xAxes\"],\n          \"additionalProperties\": false\n        },\n        \"plugins\": {\n          \"type\": [\"object\", \"null\"],\n          \"properties\": {\n            \"title\": {\n              \"type\": [\"object\", \"null\"],\n              \"properties\": {\n                \"display\": {\n                  \"type\": [\"boolean\", \"null\"]\n                },\n                \"text\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              },\n              \"required\": [\"display\", \"text\"],\n              \"additionalProperties\": false\n            },\n            \"legend\": {\n              \"type\": [\"object\", \"null\"],\n              \"properties\": {\n                \"display\": {\n                  \"type\": [\"boolean\", \"null\"]\n                },\n                \"position\": {\n                  \"type\": [\"string\", \"null\"],\n                  \"enum\": [\"top\", \"left\", \"bottom\", \"right\", null]\n                }\n              },\n              \"required\": [\"display\", \"position\"],\n              \"additionalProperties\": false\n            }\n          },\n          \"required\": [\"title\", \"legend\"],\n          \"additionalProperties\": false\n        }\n      },\n      \"required\": [\"scales\", \"plugins\"],\n      \"additionalProperties\": false\n    }\n  },\n  \"required\": [\"type\", \"data\", \"options\"],\n  \"additionalProperties\": false\n}\n}\n}\n}","options":{}},"id":"68d538f7-acce-447f-9ab1-6975639e05f7","name":"OpenAI - Generate Chart definition with Structured Output","type":"n8n-nodes-base.httpRequest","position":[1240,1080],"typeVersion":4.2,"credentials":{"openAiApi":{"id":"w75RuNSCJjKqeuAT","name":"OpenAi JPG"}}},{"parameters":{"assignments":{"assignments":[{"id":"37512e1a-8376-4ba0-bdcd-34bb9329ae4b","name":"response","type":"string","value":"={{ encodeURIComponent(\"https://quickchart.io/chart?width=200&c=\"+$json.choices[0].message.content) }}\n\n"}]},"options":{}},"id":"0fd4ad08-ad85-4d0b-b75f-0e59f789cbfd","name":"Set response","type":"n8n-nodes-base.set","position":[1480,1080],"typeVersion":3.4},{"parameters":{"content":"## Workflow: AI Agent with charts capabilities using OpenAI Structured Output\n\n**Overview**\n- This workflow is a experiment to integrate charts into an AI Agent\n- The AI Agent has normal AI conversation and can invoke a tool to integrate a graph in the conversation.\n- It uses OpenAI Structured Output to generate a chart definition according to Quickchart specifications.\n\n\n**How it works**\n- Activate the workflow\n- Start chatting with the AI Agent.\n- When the AI Agent detects that the user needs a chat, it calls the tool\n- The tool calls the sub-workflow with a query.\n- The sub-workflow calls the HTTP Request node (calling OpenAI) to retrieve a chart definition\n- In the \"set response\" node, he chat definition is added at the end of a quickchart.io url - the URL to the chart image. It is sent back to the AI Agent.\n- The AI Agent uses this image in its response.\n- For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office\n\n\n**Notes**\n- The full Quickchart.io specifications have not been integrated, thus there are some possible glitches (e.g due to the size of the graph, radar graphs are not displayed properly)\n- This could be provided to any automation, not only AI Agents.","height":619.3187860363884,"width":680.7609104727082,"color":7},"id":"6785cadb-4875-47ac-9b57-29b583c53937","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[380,240],"typeVersion":1},{"parameters":{"content":"## Generate a Quickchart definition\n\n**HTTP Request node**\n- Send the chart query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*\n- The JSON structure is based on ChartJS and Quickchart.io definitions, that let us create nice looking graphs.\n- The output is a JSON containing the chart definition that is passed to the next node.\n\n**Set Response node**\n- Adds the chart definition at the end of a Quickchart.io URL ([see documentation](https://quickchart.io/documentation/usage/parameters/))\n- Note that in the parameters, we specify the width to 250 in order to be properly displayed in the chart interface.","height":503,"width":768.8586342909368,"color":7},"id":"fd507ff6-2d16-4498-ba2b-d91b02079311","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[1100,780],"typeVersion":1},{"parameters":{"content":"### Chat Agent\n- This is agent is mostly here to demonstrate how to use the sub workflow.\n- This is a basic agent with a tool \"generate a chart\"\n- The tool calls the sub-workflow\n- The sub-workflow responds with the Quickchart URL that is displayed in the conversation","height":485.8165429718969,"width":768,"color":7},"id":"7f14532a-75ee-40f8-a45b-0f037af7cb05","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[1100,240],"typeVersion":1},{"parameters":{"options":{"systemMessage":"You're a general purpose ai. Using markdown, you can display images in the conversation. Don't change the width of the chart"}},"id":"7793a567-c4d4-4745-83c9-adf5397755e9","name":"AI Agent","type":"@n8n/n8n-nodes-langchain.agent","position":[1380,380],"typeVersion":1.6},{"parameters":{"options":{}},"id":"71bd2cb5-7b20-4d83-adba-c1fd57511155","name":"When chat message received","type":"@n8n/n8n-nodes-langchain.chatTrigger","position":[1200,380],"webhookId":"1281cd48-08a0-431d-9bf5-9bb60e6b7a77","typeVersion":1.1}],"connections":{"Generate a chart":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Window Buffer Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"When chat message received":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Execute \"Generate a chart\" tool":{"main":[[{"node":"OpenAI - Generate Chart definition with Structured Output","type":"main","index":0}]]},"OpenAI - Generate Chart definition with Structured Output":{"main":[[{"node":"Set response","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":{"templateId":"2400"},"pinData":{},"versionId":"29d3c53e-cd65-4110-9d5d-62ee07923472","triggerCount":0,"tags":[]}