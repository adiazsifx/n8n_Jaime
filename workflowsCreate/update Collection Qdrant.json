{"createdAt":"2025-05-28T15:38:23.327Z","updatedAt":"2025-05-28T15:38:44.000Z","id":"AC8dUicxHB4i6xl2","name":"Create/update Collection Qdrant","active":false,"isArchived":false,"nodes":[{"parameters":{"url":"http://192.168.3.13:6333/collections","authentication":"genericCredentialType","genericAuthType":"httpBearerAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-180,-200],"id":"631bec2f-78cd-42c2-8c93-f970da3dc382","name":"HTTP Request","credentials":{"httpBearerAuth":{"id":"LrVcAPhbHcvbYIPa","name":"Bearer Auth account"}}},{"parameters":{"jsCode":"const clientName = \"Cliente de prueba\"; // Asumiendo que el nombre del cliente viene en el campo 'clientName'\n\nif (!clientName) {\n  throw new Error(\"El nombre del cliente es requerido.\");\n}\n\nconst collectionName = `client_${clientName.replace(/[^a-zA-Z0-9_]/g, '_').toLowerCase()}`; // Nombre de la colección basado en el nombre del cliente\n\nreturn [\n  {\n    json: {\n      collectionName: collectionName,\n      operation: \"check_and_create\"\n    }\n  }\n];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-420,-200],"id":"bf07d881-58f6-4101-94a0-754244717fd2","name":"Verificar y Preparar Creación"},{"parameters":{"jsCode":"const previousOutput = $input.first().json;\nconst collectionName = previousOutput.collectionName;\n\n// Verificar si la colección ya existe en la respuesta del primer HTTP Request\nconst collectionsResponse = $input[0].data; // La respuesta del primer HTTP Request\nconst collectionExists = collectionsResponse.result.some(collection => collection.name === collectionName);\n\nlet operation = \"\";\nlet pointsPayload = []; // Aquí irán los objetos que quieres guardar\n\n// *** Aquí deberías tener la lógica para obtener los objetos que quieres guardar ***\n// Por ejemplo, si los recibes en el webhook o de un nodo anterior.\n// Para este ejemplo, vamos a simular algunos puntos.\nconst objectsToSave = [\n  { id: 1, vector: [0.05, 0.61, 0.76, 0.74], payload: { text: \"Texto del objeto 1\" } },\n  { id: 2, vector: [0.19, 0.81, 0.75, 0.11], payload: { text: \"Otro texto\" } }\n];\n\npointsPayload = objectsToSave.map(obj => ({\n  id: obj.id,\n  vector: obj.vector,\n  payload: obj.payload\n}));\n\nlet itemsToReturn = [];\n\nif (!collectionExists) {\n  operation = \"create_collection\";\n  itemsToReturn.push({\n    json: {\n      collectionName: collectionName,\n      operation: operation,\n      vectorsConfig: {\n        size: objectsToSave[0]?.vector?.length || 4, // Ajusta la dimensión del vector según tus datos\n        distance: \"Cosine\" // Puedes cambiar la métrica de distancia\n      }\n    }\n  });\n}\n\noperation = \"upsert_points\"; // Siempre haremos un upsert (crear si no existe, actualizar si existe el ID)\nitemsToReturn.push({\n  json: {\n    collectionName: collectionName,\n    operation: operation,\n    points: pointsPayload\n  }\n});\n\nreturn itemsToReturn;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[80,-200],"id":"d055890b-cbe6-4898-ae72-caf1f4620a03","name":"Lógica de Creación/Actualización"}],"connections":{"HTTP Request":{"main":[[{"node":"Lógica de Creación/Actualización","type":"main","index":0}]]},"Verificar y Preparar Creación":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"e3f58732-40bf-452a-90f0-2df67ee03a9c","triggerCount":0,"tags":[]}