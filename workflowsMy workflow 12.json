{"createdAt":"2025-05-31T01:24:06.610Z","updatedAt":"2025-05-31T02:11:05.000Z","id":"TIJNjxifSpdKZM3B","name":"My workflow 12","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"4aa60685-3d64-485f-b263-f56f2f9784b8","name":"When clicking â€˜Execute workflowâ€™"},{"parameters":{"url":"http://192.168.2.12:5678/api/v1/workflows","authentication":"predefinedCredentialType","nodeCredentialType":"n8nApi","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[220,0],"id":"4ef62d88-8eec-41c7-a027-20f0994993f5","name":"HTTP Request","credentials":{"n8nApi":{"id":"CzBxMGOtzFQ2tJh0","name":"n8n api_key JPG"}}},{"parameters":{"jsCode":"const allWorkflows = $input.all()[0].json.data;\nconst fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n\nconst results = [];\n\nfor (const workflow of allWorkflows) {\n  if (!workflow.active) continue;\n  \n  // SIMULAR - reemplazar con HTTP Request real\n  const mockExecutions = [\n    { status: 'error', startedAt: new Date().toISOString() },\n    // Simular 30+ errores...\n  ];\n  \n  // Contar errores en Ãºltimos 5 minutos\n  const recentErrors = mockExecutions.filter(exec => {\n    const execTime = new Date(exec.startedAt);\n    return execTime > fiveMinutesAgo && exec.status === 'error';\n  }).length;\n  \n  if (recentErrors >= 30) {\n    results.push({\n      workflowId: workflow.id,\n      workflowName: workflow.name,\n      errorCount: recentErrors\n    });\n  }\n}\n\nif (results.length === 0) return [];\n\nreturn [{\n  whatsapp_message: `ðŸš¨ ${results.length} workflow(s) con 30+ errores en 5min\\n${results.map(w => `â€¢ ${w.workflowName}: ${w.errorCount} errores`).join('\\n')}`,\n  \n  email_subject: `ðŸš¨ N8N: ${results.length} Workflow(s) con Errores CrÃ­ticos`,\n  \n  email_body: `\n<h2>ðŸš¨ Workflows con Errores CrÃ­ticos</h2>\n<p><strong>PerÃ­odo:</strong> Ãšltimos 5 minutos</p>\n<p><strong>Umbral:</strong> 30+ errores</p>\n\n<h3>Workflows Afectados (${results.length})</h3>\n<ul>\n${results.map(w => `<li><strong>${w.workflowName}</strong><br>\n   ID: ${w.workflowId}<br>\n   Errores: ${w.errorCount}</li>`).join('')}\n</ul>`,\n  \n  workflows: results\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[440,0],"id":"ba9a482e-ccc0-48a8-afce-fb304f54edaf","name":"Code","alwaysOutputData":true}],"connections":{"When clicking â€˜Execute workflowâ€™":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Bogota","callerPolicy":"workflowsFromSameOwner","executionTimeout":900,"errorWorkflow":"Txht1wrdLAI370JY","timeSavedPerExecution":60},"staticData":null,"meta":null,"pinData":{},"versionId":"31912b2a-7dd6-478d-9fb6-8b3562a6cbd1","triggerCount":0,"tags":[]}