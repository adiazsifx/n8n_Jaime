{"createdAt":"2025-04-09T19:41:25.137Z","updatedAt":"2025-05-26T20:13:58.000Z","id":"FRs9Q4wSKR7f8Jl7","name":"Chat IA v1.0","active":false,"isArchived":false,"nodes":[{"parameters":{"promptType":"define","text":"=Eres un asistente que responde preguntas  sobre servicios del cliente.\n\nAnalisa los servicios del cliente {{ $json.services }} y responde la consulta {{ $('Webhook').item.json.body.consulta }} \n\nNo inventes informacion\nNo entras informacion diferente a servicios\nNo respondas consultas no realizadas\n\n","options":{"systemMessage":"=Responde solo mensajes en base a los servicios del Cliente\n\nNo inventes informacion, responde solo lo consultado.\n\nResponde en un tono profesional.\n\nResponde unicamente con informacion de los servicios del cliente.","returnIntermediateSteps":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[920,-580],"id":"9f89b8f9-727e-422c-99b7-bf0cd13b7186","name":"AI Agent","alwaysOutputData":true},{"parameters":{"model":{"__rl":true,"value":"llama-3.3-70B-Instruct","mode":"list","cachedResultName":"llama-3.3-70B-Instruct"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[700,-340],"id":"7e11b38b-c04c-478b-a3df-7189b535cde1","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}}},{"parameters":{"httpMethod":"POST","path":"63f2f3df-96c0-41a3-9fb8-dc5107b3b861","responseMode":"lastNode","options":{"rawBody":true}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[300,-580],"id":"28d82361-d7da-4f5d-ac65-678898c985ea","name":"Webhook","webhookId":"63f2f3df-96c0-41a3-9fb8-dc5107b3b861"},{"parameters":{"jsCode":"// Code Node - Agrupa todo en un solo item principal\nconst services = $input.first().json.body.services || [];\n\n// Crear un objeto único con toda la información\nconst datosServicios = {\n  // Información básica\n  fecha_consulta: new Date().toISOString().split('T')[0],\n  total_servicios: services.length,\n  servicios_activos: services.filter(s => s.status === 'Activo').length,\n  \n  // Ancho de banda\n  ancho_banda_total: services.reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  servicios_con_banda: services.filter(s => s.bandwidthService && parseFloat(s.bandwidthService) > 0).length,\n  \n  // Ubicaciones\n  ciudades: [...new Set(services.map(s => s.cityInstall))],\n  paises: [...new Set(services.map(s => s.countryInstall))],\n  total_ciudades: [...new Set(services.map(s => s.cityInstall))].length,\n  total_paises: [...new Set(services.map(s => s.countryInstall))].length,\n  \n  // Tipos y familias\n  tipos_servicio: [...new Set(services.map(s => s.productType))],\n  familias: [...new Set(services.map(s => s.family))],\n  \n  // Desglose por ciudad\n  bogota_servicios: services.filter(s => s.cityInstall.toLowerCase().includes('bogotá')).length,\n  bogota_banda: services.filter(s => s.cityInstall.toLowerCase().includes('bogotá')).reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  choluteca_servicios: services.filter(s => s.cityInstall.toLowerCase().includes('choluteca')).length,\n  choluteca_banda: services.filter(s => s.cityInstall.toLowerCase().includes('choluteca')).reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  \n  // Desglose por país\n  colombia_servicios: services.filter(s => s.countryInstall === 'Colombia').length,\n  colombia_banda: services.filter(s => s.countryInstall === 'Colombia').reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  honduras_servicios: services.filter(s => s.countryInstall === 'Honduras').length,\n  honduras_banda: services.filter(s => s.countryInstall === 'Honduras').reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  \n  // Desglose por tipo\n  cloud_server_cantidad: services.filter(s => s.productType === 'Cloud Server').length,\n  cloud_server_banda: services.filter(s => s.productType === 'Cloud Server').reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  internet_premium_cantidad: services.filter(s => s.productType === 'Internet Premium').length,\n  internet_premium_banda: services.filter(s => s.productType === 'Internet Premium').reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0),\n  \n  // Lista de servicios simplificada\n  lista_servicios: services.map(s => ({\n    nombre: s.name,\n    codigo: s.code,\n    estado: s.status,\n    tipo: s.productType,\n    ciudad: s.cityInstall,\n    pais: s.countryInstall,\n    banda: parseFloat(s.bandwidthService) || 0\n  })),\n  \n  // Contexto completo para IA\n  descripcion_completa: `\n  RESUMEN DE SERVICIOS TELECOM:\n  - Total de servicios: ${services.length}\n  - Servicios activos: ${services.filter(s => s.status === 'Activo').length}\n  - Ancho de banda total: ${services.reduce((sum, s) => sum + (parseFloat(s.bandwidthService) || 0), 0)} Mbps\n  - Países: ${[...new Set(services.map(s => s.countryInstall))].join(', ')}\n  - Ciudades: ${[...new Set(services.map(s => s.cityInstall))].join(', ')}\n  - Tipos: ${[...new Set(services.map(s => s.productType))].join(', ')}\n  \n  DISTRIBUCIÓN POR UBICACIÓN:\n  - Colombia: ${services.filter(s => s.countryInstall === 'Colombia').length} servicios\n  - Honduras: ${services.filter(s => s.countryInstall === 'Honduras').length} servicios\n  - Bogotá: ${services.filter(s => s.cityInstall.toLowerCase().includes('bogotá')).length} servicios\n  - Choluteca: ${services.filter(s => s.cityInstall.toLowerCase().includes('choluteca')).length} servicios\n  \n  SERVICIOS POR TIPO:\n  - Cloud Server: ${services.filter(s => s.productType === 'Cloud Server').length} servicios\n  - Internet Premium: ${services.filter(s => s.productType === 'Internet Premium').length} servicios\n  - Cloud Resource Pool: ${services.filter(s => s.productType === 'Cloud Resource Pool').length} servicios\n  `\n};\n\n// Retornar todo en un solo item\nreturn [{\n  json: {services:datosServicios}\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[620,-580],"id":"33766197-ecea-46c6-b742-ee011dfb58cd","name":"Code"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $execution.id }}"},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[1020,-360],"id":"b76e64e2-ec2c-498f-a137-7b2f4c2b2845","name":"Simple Memory"}],"connections":{"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Webhook":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Simple Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e7cfb79b-0294-4ae7-a956-2cc7b54bda86","triggerCount":1,"tags":[]}