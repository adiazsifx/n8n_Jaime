{"createdAt":"2025-05-15T14:51:42.171Z","updatedAt":"2025-05-16T12:56:04.000Z","id":"sHVWbzZi9dmbm3qU","name":"Licitainfo Filter Colombia","active":false,"nodes":[{"parameters":{"pollTimes":{"item":[{"mode":"everyMinute"}]},"output":"raw","filters":{"foldersToInclude":["AAMkAGUyOTgzNDViLTIwY2ItNDFmNi04ODUwLTNmZTJmZjI5ZTY5MgAuAAAAAAD2otzNIFhhTLQNl5GG7b3VAQA59ESx-VUJQ61HIyY6Bm7SAAgOOqoXAAA="]},"options":{}},"type":"n8n-nodes-base.microsoftOutlookTrigger","typeVersion":1,"position":[-100,0],"id":"be708116-dc7c-47be-a73f-0d559212a322","name":"Microsoft Outlook Trigger","credentials":{"microsoftOutlookOAuth2Api":{"id":"WVU9558r90tkJoj9","name":"Outlook jaimep@ifxcorp.com"}}},{"parameters":{"jsCode":"// Código para nodo \"Code\" en n8n\n// Extrae contenido específico del correo y decodifica URLs protegidas de Outlook\n\n// Obtener el texto del input anterior\nconst htmlContent = $input.first().json.body.content;\n\n// Función para decodificar URLs protegidas de Outlook\nfunction decodeOutlookSafeLink(safeLink) {\n  try {\n    // Extraer la URL original del parámetro \"url=\"\n    const urlParam = safeLink.match(/url=([^&]+)/);\n    if (urlParam && urlParam[1]) {\n      // Decodificar la URL\n      return decodeURIComponent(urlParam[1]);\n    }\n    return safeLink;\n  } catch (error) {\n    return safeLink;\n  }\n}\n\n// Función para extraer el contenido específico del correo en formato markdown\nfunction extractToMarkdown(htmlContent) {\n  // Primero limpiar el HTML\n  let content = htmlContent;\n  const bodyMatch = htmlContent.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i);\n  if (bodyMatch && bodyMatch[1]) {\n    content = bodyMatch[1];\n  }\n  \n  // Extraer enlaces antes de limpiar el HTML para preservarlos\n  const links = [];\n  const linkRegex = /<a\\s+(?:[^>]*?\\s+)?href=\"([^\"]*)\"[^>]*>(.*?)<\\/a>/gi;\n  let linkMatch;\n  \n  // Crear un mapa para reemplazar después\n  const linkReplacements = [];\n  \n  while ((linkMatch = linkRegex.exec(content)) !== null) {\n    let url = linkMatch[1];\n    // Decodificar si es una URL protegida de Outlook\n    if (url.includes('safelinks.protection.outlook.com')) {\n      url = decodeOutlookSafeLink(url);\n    }\n    const text = linkMatch[2].replace(/<[^>]*>/g, '');\n    linkReplacements.push({\n      original: linkMatch[0],\n      markdown: `[${text}](${url})`\n    });\n  }\n  \n  // Reemplazar enlaces HTML por formato markdown\n  linkReplacements.forEach(replacement => {\n    content = content.replace(replacement.original, replacement.markdown);\n  });\n  \n  // Eliminar todas las demás etiquetas HTML\n  content = content.replace(/<[^>]*>/g, '');\n  \n  // Decodificar entidades HTML comunes\n  content = content.replace(/&nbsp;/g, ' ')\n                   .replace(/&amp;/g, '&')\n                   .replace(/&lt;/g, '<')\n                   .replace(/&gt;/g, '>')\n                   .replace(/&quot;/g, '\"')\n                   .replace(/&#39;/g, \"'\");\n  \n  // Extraer solo la parte entre \"Asunto:\" y el final de \"Nuestros clientes tambien tienen su espacio\"\n  const asuntoIndex = content.indexOf('Asunto:');\n  const nuestrosClientesIndex = content.indexOf('Nuestros clientes tambien tienen su espacio. Conozcalos!');\n  \n  if (asuntoIndex !== -1 && nuestrosClientesIndex !== -1 && asuntoIndex < nuestrosClientesIndex) {\n    // Añadir también la frase \"Nuestros clientes...\"\n    return content.substring(asuntoIndex, nuestrosClientesIndex + 'Nuestros clientes tambien tienen su espacio. Conozcalos!'.length).trim();\n  } else {\n    // Si no se encuentran los marcadores, devolver todo el contenido limpio\n    return content.trim();\n  }\n}\n\n// Función para detectar y formatear URLs planas en formato markdown\nfunction formatPlainUrls(text) {\n  // Buscar URLs que no estén ya en formato markdown\n  const urlRegex = /(?<!\\()(https?:\\/\\/[^\\s()<>]+)(?!\\))/g;\n  \n  return text.replace(urlRegex, (match) => {\n    // Decodificar si es una URL protegida de Outlook\n    if (match.includes('safelinks.protection.outlook.com')) {\n      const decodedUrl = decodeOutlookSafeLink(match);\n      return `[${decodedUrl}](${decodedUrl})`;\n    }\n    return `[${match}](${match})`;\n  });\n}\n\n// Función para formatear nombres de documentos\nfunction formatDocuments(text) {\n  // Buscar líneas que comienzan con \"- \" seguido de un nombre de documento\n  const docRegex = /- ([^.]+\\.pdf)/g;\n  return text.replace(docRegex, '- **$1**');\n}\n\n// Procesar el contenido\nlet markdownContent = extractToMarkdown(htmlContent);\nmarkdownContent = formatPlainUrls(markdownContent);\nmarkdownContent = formatDocuments(markdownContent);\n\n// También extraer todas las URLs de Outlook y decodificarlas para tenerlas disponibles\nconst outlookUrls = [];\nconst outlookUrlRegex = /https:\\/\\/nam\\d+\\.safelinks\\.protection\\.outlook\\.com\\/\\?[^\"\\s<>)]+/g;\nlet outlookMatch;\nlet htmlContentCopy = htmlContent;\n\nwhile ((outlookMatch = outlookUrlRegex.exec(htmlContentCopy)) !== null) {\n  const safeLink = outlookMatch[0];\n  const originalUrl = decodeOutlookSafeLink(safeLink);\n  outlookUrls.push({\n    safeLink: safeLink,\n    originalUrl: originalUrl\n  });\n}\n\n// Devolver el contenido en formato markdown y las URLs decodificadas\nreturn [\n  { json: { markdown: markdownContent } },\n  ...outlookUrls.map((link, index) => ({ \n    json: { \n      tipo: \"url_decodificada\",\n      indice: index + 1,\n      url_outlook: link.safeLink,\n      url_original: link.originalUrl\n    } \n  }))\n];\n\n// Procesar el contenido\nconst specificContent = extractSpecificContent(htmlContent);\nconst result = convertToMultipleItems(specificContent);\n\n// Devolver múltiples items\nreturn result;\n\n// Para usar este script:\n// 1. Reemplaza markdownExample con tu texto real\n// 2. Ejecuta el script\n// 3. El resultado es un JSON donde cada línea del texto original es una clave"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[300,0],"id":"bec8f24e-6185-43e3-bf7a-57349ed4f373","name":"Code"},{"parameters":{"assignments":{"assignments":[{"id":"3b3c0d58-0c96-4f84-a702-5c44b093fa26","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"9dc75706-8c3f-4559-bde1-ac015c20361e","name":"body.content","value":"={{ $json.body.content }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[120,0],"id":"eb96a387-3159-4b8b-b50c-e5f95d887e85","name":"Edit Fields"},{"parameters":{"text":"={{ $json.markdown }}","schemaType":"fromJson","jsonSchemaExample":"{\n  \"asunto\": \"[Urg]ALCAL. DE TINJACA minima cuantia MT-MC-012-2025 [93206]\",\n  \"entidad\": \"ALCAL. DE TINJACA\",\n  \"concepto\": \"Contratación mínima cuantía MT-MC-012-2025\",\n  \"objeto\": \"ADQUISICION DEL SERVICIO DE ACCESO A INTERNET POR FIBRA OPTICA PARA LAS DEPENDENCIAS DE LA ALCALDIA MUNICIPAL Y LA BIBLIOTECA PUBLICA DEL MUNICIPIO DE TINJACA\",\n  \"valor\": \"$10.000.000\",\n  \"localizacion\": \"Boyacá Tinjacá\",\n  \"portal_origen\": \"SECOP 2\",\n  \"fecha_publicacion\": \"2025-05-14 08:36:00 am\",\n  \"funcionalidades_de_la_herramienta\": \"https://col.licitaciones.info/detalle-contrato?random=67f70bd9505d31.74719324\",\n  \"documentos\": [\n    {\n      \"nombre\": \"ANALISIS DEL SECTOR INTERNET.pdf\",\n      \"enlace\": \"https://community.secop.gov.co/Public/Archive/RetrieveFile/Index?DocumentId=611919317\"\n    },\n    {\n      \"nombre\": \"CDP INTERNET.pdf\",\n      \"enlace\": \"https://community.secop.gov.co/Public/Archive/RetrieveFile/Index?DocumentId=611919318\"\n    },\n    {\n      \"nombre\": \"CERTIFICACION PAA.pdf\",\n      \"enlace\": null\n    }\n  ]\n}\n","options":{"systemPromptTemplate":"ERES UN AGENTE EXTRACTOR DE DATOS DE ALTO RENDIMIENTO ENTRENADO PARA IDENTIFICAR Y ESTRUCTURAR INFORMACIÓN CLAVE DESDE TEXTOS DE LICITACIONES COLOMBIANAS. TU OBJETIVO ES DEVOLVER UN OBJETO JSON CON LOS SIGUIENTES CAMPOS ESTANDARIZADOS:\n\n- \"asunto\"\n- \"entidad\"\n- \"concepto\"\n- \"objeto\"\n- \"valor\"\n- \"localizacion\"\n- \"portal_origen\"\n- \"fecha_publicacion\"\n- **\"funcionalidades_de_la_herramienta\" ← ESTE CAMPO ES CRÍTICO**\n- \"documentos\": una lista de objetos con campos \"nombre\" y \"enlace\"\n\n### INSTRUCCIONES:\n\n1. EXTRAE ÚNICAMENTE INFORMACIÓN RELEVANTE Y PRESENTE EN EL TEXTO.\n2. OMITE CUALQUIER CAMPO CUYO VALOR NO PUEDA DETERMINARSE CLARAMENTE.\n3. ASEGÚRATE DE FORMAR UN JSON VÁLIDO, BIEN ESTRUCTURADO Y FORMATEADO.\n4. DETECTA Y ASOCIA DOCUMENTOS CON SUS ENLACES Y NOMBRES LIMPIOS.\n5. EN CAMPOS COMO “ENTIDAD”, “OBJETO” Y “VALOR”, USA EL TEXTO EXACTO EXTRAÍDO.\n6. ELIMINA DOBLES PUNTOS, CORCHETES O CARACTERES EXTRAÑOS QUE NO FORMEN PARTE DEL CONTENIDO PROPIAMENTE DICHO.\n7. **ES OBLIGATORIO DETECTAR Y EXTRAER EL ENLACE UBICADO DESPUÉS DE “Enlace directo a licitaciones.info” Y GUARDARLO COMO \"funcionalidades_de_la_herramienta\"**. NO LO OMITAS.\n\n### CHAIN OF THOUGHTS:\n\n1. **ENTENDER**: LEE TODO EL TEXTO COMO UN CUERPO UNIFICADO Y DETECTA EL BLOQUE CENTRAL DE INFORMACIÓN LICITATORIA.\n2. **BÁSICOS**: IDENTIFICA LOS ATRIBUTOS SOLICITADOS COMO CLAVES DEL JSON.\n3. **DESCOMPONER**: UBICA CADA DATO POR SECCIONES (asunto, entidad, objeto, etc.).\n4. **ANALIZAR**: RELACIONA LOS DATOS CONTEXTUALMENTE (ej. el objeto de contratación suele estar tras la palabra \"Objeto:\").\n5. **ENSAMBLAR**: ORGANIZA LOS DATOS EN UN JSON CON CLAVES Y VALORES CLAROS.\n6. **CASOS EXTREMOS**: SI ALGÚN VALOR NO SE ENCUENTRA EXPLÍCITAMENTE, NO LO INCLUYAS.\n7. **FUNCIÓN CRÍTICA**: BUSCA ENLACES WEB QUE CONTENGAN \"licitaciones.info\" Y EXTRAER EL PRIMERO COMO \"funcionalidades_de_la_herramienta\". ES UNA OBLIGACIÓN.\n8. **RESPUESTA FINAL**: DEVUELVE SOLO EL OBJETO JSON, SIN COMENTARIOS NI TEXTO ADICIONAL.\n\n### WHAT NOT TO DO:\n\n- **NUNCA OMITAS EL CAMPO \"funcionalidades_de_la_herramienta\" SI EL ENLACE ESTÁ PRESENTE EN EL TEXTO**.\n- **NO INVENTES** VALORES DE CAMPOS QUE NO SE ENCUENTRAN EXPLÍCITAMENTE EN EL TEXTO.\n- **NO REPITAS** CAMPOS NI GENERES JSON MAL FORMADO.\n- **NO INCLUYAS ENLACES O CAMPOS INEXACTOS**, MAL FORMATEADOS O PARCIALES.\n- **NO CONTAMINES** LA SALIDA CON TEXTOS PROMOCIONALES O AJENOS A LA LICITACIÓN.\n"}},"type":"@n8n/n8n-nodes-langchain.informationExtractor","typeVersion":1,"position":[720,0],"id":"98670574-b53b-4f22-a012-bc99f39e8ad4","name":"Information Extractor"},{"parameters":{"model":{"__rl":true,"value":"openai-mini","mode":"list","cachedResultName":"openai-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[640,200],"id":"5c6a64d3-2fd4-4f83-b5db-45e15836e8b3","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"3ksygUY2AafRzzfk","name":"Proxy LiteLLM"}}},{"parameters":{"url":"={{ $json.enlace }}","options":{"allowUnauthorizedCerts":true,"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1440,20],"id":"1f9c0fe2-cea2-44e8-bdcf-6376d55b6df8","name":"HTTP Request","alwaysOutputData":true},{"parameters":{"jsCode":"// Verificar y corregir si markdown es null\nconst item = $input.first();\nif (!item.json.markdown) {\n  item.json.markdown = \"\";\n}\nreturn [item];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[500,0],"id":"d31db4d1-1871-4bad-bb8b-25f092f22095","name":"Code1"},{"parameters":{"fieldToSplitOut":"output.documentos","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[1040,0],"id":"77e8a2c7-f634-4144-8aa9-4271fe03a158","name":"Split Out"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1220,0],"id":"5b89e59a-0ed1-4f9d-8517-7aaa3617195f","name":"Loop Over Items"},{"parameters":{"operation":"write","fileName":"=/home/node/files/{{ $json.nombre }}","options":{"append":false}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[1640,20],"id":"a46956b9-c230-4cf3-987f-f62bd44c6678","name":"Read/Write Files from Disk"},{"parameters":{"method":"POST","url":"https://api.cloud.llamaindex.ai/api/v1/parsing/upload","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1900,-60],"id":"030299b6-8c86-43fe-b765-cbfdc367ad3d","name":"Parser PDF - DOCS","credentials":{"httpHeaderAuth":{"id":"rDHcHgP5GNq3qUHB","name":"API Llamaindex"}}},{"parameters":{"url":"=https://api.cloud.llamaindex.ai/api/v1/parsing/job/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2180,-140],"id":"cd2d8c53-8d82-4e9d-ba17-4b6a65c5fb92","name":"GET Parser PDF - DOCS","credentials":{"httpHeaderAuth":{"id":"rDHcHgP5GNq3qUHB","name":"API Llamaindex"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.status }}","rightValue":"SUCCESS","operator":{"type":"string","operation":"equals"},"id":"1ca170e5-f79b-45d0-bf06-8817aaa91020"}],"combinator":"and"},"renameOutput":true,"outputKey":"SUCCESS"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"728cff21-b861-4c35-a66f-1159958560fb","leftValue":"={{ $json.status }}","rightValue":"CANCELED","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"CANCELED"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"6b32d09d-aca1-4ac2-add0-08fddb408eef","leftValue":"={{ $json.status }}","rightValue":"ERROR","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"ERROR"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8ed9a7f3-a77b-4541-a2c5-1ec659349c4c","leftValue":"={{ $json.status }}","rightValue":"PENDING","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"PENDING"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2380,-180],"id":"f9c670c2-76b0-42ad-9299-1f43de830b87","name":"Status Job  PDF - DOC"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2800,-40],"id":"5074710f-d711-4826-aa6f-2505ad4274d4","name":"Wait Job PDF - DOC","webhookId":"f87508bf-6d05-4bd8-8d79-ebc5d503d0fd"},{"parameters":{"url":"=https://api.cloud.llamaindex.ai/api/v1/parsing/job/{{ $('GET Parser PDF - DOCS').item.json.id }}/result/markdown","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{}]},"options":{"redirect":{"redirect":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2800,-500],"id":"4bfdb555-ea1c-4e1b-b015-3c063b96305e","name":"Success PDF - DOC","credentials":{"httpHeaderAuth":{"id":"rDHcHgP5GNq3qUHB","name":"API Llamaindex"}}},{"parameters":{"errorMessage":"Error Job Parser PDF - DOC"},"type":"n8n-nodes-base.stopAndError","typeVersion":1,"position":[2680,-220],"id":"b4a36259-807d-4540-a3b8-5a8749c6d1a9","name":"Error PDF - DOC"},{"parameters":{"mode":"insert","milvusCollection":{"__rl":true,"value":"=","mode":"id"},"embeddingBatchSize":1024,"options":{}},"type":"@n8n/n8n-nodes-langchain.vectorStoreMilvus","typeVersion":1.1,"position":[3200,-280],"id":"e3b99257-b320-489b-803a-7386d0e774dd","name":"Milvus Vector Store","credentials":{"milvusApi":{"id":"UmD6alCThRwxxJuO","name":"Milvus Root Account"}}},{"parameters":{"method":"POST","url":"http://192.168.3.13:19530/v2/vectordb/collections/create","authentication":"predefinedCredentialType","nodeCredentialType":"milvusApi","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"dbName\": \"n8n\",\n   \"collectionName\": \"licita_{{ $json.random_code }}\",\n   \"schema\": {\n       \"autoId\": false,\n       \"enabledDynamicField\": true,\n       \"fields\": [\n           {\n               \"fieldName\": \"id\",\n               \"dataType\": \"VarChar\",\n               \"isPrimary\": true,\n               \"elementTypeParams\": {\n                   \"max_length\": 65535\n               }\n           },\n           {\n               \"fieldName\": \"vector\",\n               \"dataType\": \"FloatVector\",\n               \"elementTypeParams\": {\n                   \"dim\": 1024\n               }\n           },\n           {\n               \"fieldName\": \"data\",\n               \"dataType\": \"JSON\"\n           },\n           {\n               \"fieldName\": \"metadata\",\n               \"dataType\": \"JSON\"\n           }\n       ]\n   },\n   \"indexParams\": [\n       {\n           \"fieldName\": \"vector\",\n           \"metricType\": \"COSINE\",\n           \"indexName\": \"vector\",\n           \"indexType\": \"HNSW\"\n       }\n   ],\n   \"params\": {\n       \"consistencyLevel\": \"Bounded\"\n   }\n} ","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1260,-200],"id":"9b1b2931-3e52-4012-a934-45427568e0d8","name":"HTTP Request1","credentials":{"milvusApi":{"id":"UmD6alCThRwxxJuO","name":"Milvus Root Account"}}},{"parameters":{"jsCode":"// Función para extraer el código aleatorio de la URL o generar uno nuevo\nfunction extractOrGenerateRandomCode(inputText) {\n  try {\n    // Verificar si la entrada es undefined o null\n    if (!inputText) {\n      return { \n        random_code: generateRandomCode(),\n        generated: true,\n        error: \"La entrada era vacía; se generó un código aleatorio\" \n      };\n    }\n    \n    // Intentar encontrar cualquier URL que contenga \"random=\"\n    const urlRegex = /https?:\\/\\/[^\\s]+random=([^\\s&]+)/;\n    const match = inputText.match(urlRegex);\n    \n    if (!match || !match[1]) {\n      return { \n        random_code: generateRandomCode(),\n        generated: true,\n        error: \"No se encontró una URL con parámetro 'random'; se generó un código aleatorio\" \n      };\n    }\n    \n    // Extraer el código completo después de \"random=\"\n    const fullRandomCode = match[1];\n    \n    // Extraer la parte antes del primer punto\n    const dotIndex = fullRandomCode.indexOf('.');\n    if (dotIndex === -1) {\n      // Si no hay punto, devolver el código completo\n      return { \n        random_code: fullRandomCode,\n        generated: false,\n        error: null \n      };\n    }\n    \n    // Extraer la parte antes del punto\n    const codeBeforeDot = fullRandomCode.substring(0, dotIndex);\n    \n    return {\n      random_code: codeBeforeDot,\n      full_random_code: fullRandomCode,\n      generated: false,\n      error: null\n    };\n  } catch (error) {\n    return {\n      random_code: generateRandomCode(),\n      generated: true,\n      error: `Error al procesar: ${error.message}; se generó un código aleatorio`\n    };\n  }\n}\n\n// Función para generar un código aleatorio similar al formato original\nfunction generateRandomCode() {\n  // Generar 13 caracteres hexadecimales (como en el ejemplo 67f7eb8dc74e12)\n  let result = '';\n  const hexChars = '0123456789abcdef';\n  \n  // Generar 13 caracteres (longitud típica del código)\n  for (let i = 0; i < 13; i++) {\n    result += hexChars.charAt(Math.floor(Math.random() * hexChars.length));\n  }\n  \n  return result;\n}\n\n// Obtener la entrada de la variable especificada\nconst inputText = $('Information Extractor').first()?.json?.output?.funcionalidades_de_la_herramienta;\n\n// Procesar la entrada\nconst result = extractOrGenerateRandomCode(inputText);\n\n// Devolver el resultado\nreturn [{ json: result }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1040,-200],"id":"7723afcf-340b-4295-8f08-21665235febb","name":"Code2","alwaysOutputData":true},{"parameters":{"model":"embedding-model","options":{}},"type":"@n8n/n8n-nodes-langchain.embeddingsOpenAi","typeVersion":1.2,"position":[3140,-80],"id":"75e57baf-11b3-4bce-8311-ce2772ff2421","name":"Embeddings OpenAI","credentials":{"openAiApi":{"id":"3ksygUY2AafRzzfk","name":"Proxy LiteLLM"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","typeVersion":1,"position":[3280,-80],"id":"df8e4c3f-08c4-465d-8a53-e2ecaad54019","name":"Default Data Loader"},{"parameters":{"chunkSize":2000,"chunkOverlap":200,"options":{"splitCode":"markdown"}},"type":"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter","typeVersion":1,"position":[3360,160],"id":"24b86982-08d6-43ad-87b2-cfae5b56424a","name":"Recursive Character Text Splitter"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2920,-300],"id":"c2f66be1-2f54-417e-80c9-7584d3eafab5","name":"Aggregate"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[2800,-660],"id":"1e74c862-514d-4875-8d69-4fdd8ef7ef22","name":"No Operation, do nothing"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[3100,-540],"id":"99b6c5e1-7116-4b1c-95cc-941047074403","name":"Merge"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1480,-200],"id":"1542e6c5-f188-40a4-8f37-3334b58280a2","name":"No Operation, do nothing1"}],"connections":{"Microsoft Outlook Trigger":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Information Extractor","type":"ai_languageModel","index":0}]]},"Information Extractor":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Information Extractor","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}],[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Read/Write Files from Disk","type":"main","index":0}]]},"Read/Write Files from Disk":{"main":[[{"node":"Parser PDF - DOCS","type":"main","index":0}]]},"GET Parser PDF - DOCS":{"main":[[{"node":"Status Job  PDF - DOC","type":"main","index":0}]]},"Status Job  PDF - DOC":{"main":[[{"node":"Success PDF - DOC","type":"main","index":0}],[{"node":"Error PDF - DOC","type":"main","index":0}],[{"node":"Error PDF - DOC","type":"main","index":0}],[{"node":"Wait Job PDF - DOC","type":"main","index":0}]]},"Wait Job PDF - DOC":{"main":[[{"node":"GET Parser PDF - DOCS","type":"main","index":0}]]},"Parser PDF - DOCS":{"main":[[{"node":"GET Parser PDF - DOCS","type":"main","index":0}]]},"Milvus Vector Store":{"main":[[]]},"Success PDF - DOC":{"main":[[{"node":"Loop Over Items","type":"main","index":0},{"node":"Merge","type":"main","index":1}]]},"HTTP Request1":{"main":[[]]},"Code2":{"main":[[]]},"Embeddings OpenAI":{"ai_embedding":[[{"node":"Milvus Vector Store","type":"ai_embedding","index":0}]]},"Default Data Loader":{"ai_document":[[{"node":"Milvus Vector Store","type":"ai_document","index":0}]]},"Recursive Character Text Splitter":{"ai_textSplitter":[[{"node":"Default Data Loader","type":"ai_textSplitter","index":0}]]},"Aggregate":{"main":[[{"node":"Milvus Vector Store","type":"main","index":0}]]},"No Operation, do nothing":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Aggregate","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e7200cfb-2d81-4c21-9b62-d54079633593","triggerCount":0,"tags":[]}